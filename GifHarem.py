__version__ = (
    2,
    0,
    0,
)  ###–î–∞, —ç—Ç–æ -- –∫–æ–ø–∏—Ä–∫–∞ –º–æ–¥—É–ª—è HornyHarem. –Ø –Ω–µ –≤–∏–Ω–æ–≤–∞—Ç, —á—Ç–æ —É —Ä–∞–∑—Ä–∞–±–∞ –≤–æ –≤—Å–µ–π —Å–≤—è–∑–∫–µ –±–æ—Ç–æ–≤ –∫–æ–¥ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π.ü•∞

# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë
# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë
# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñî‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë
# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñÅ‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
# ‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà
# ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñà
# ‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà
# ‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà‚ñë‚ñà
# ‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà
# H:Mods Team [üíé]


# meta developer: @nullmod

from hikkatl.tl.functions.chatlists import (
    CheckChatlistInviteRequest,
    JoinChatlistInviteRequest,
    LeaveChatlistRequest,
)
from hikkatl.tl.functions.messages import (
    ImportChatInviteRequest,
    CheckChatInviteRequest,
)
from hikkatl.tl.functions.channels import JoinChannelRequest, LeaveChannelRequest
from hikkatl.tl.functions.contacts import BlockRequest, UnblockRequest
from hikkatl.tl.types import Message, InputChatlistDialogFilter
from hikkatl.errors import YouBlockedUserError, InviteRequestSentError
from .. import loader
import asyncio
import logging
import time
import re

logger = logging.getLogger(__name__)


@loader.tds
class GifHarem(loader.Module):
    """Automatization module for @GIFgarem_bot"""

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "ab",
                False,
                "–ê–≤—Ç–æ–±–æ–Ω—É—Å(/bonus, –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏, 'lights out')",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "catch_output",
                True,
                "–í—ã–≤–æ–¥–∏—Ç—å –≤–∞–π—Ñ—É?(–ø—Ä–∏ –ª–æ–≤–ª–µ)",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "catch",
                False,
                "–Ø –ª–æ–≤–ª—é –≤–∞–π—Ñ—É?",
                validator=loader.validators.Boolean(),
            ),
        )

    strings = {"name": "GifHarem"}

    async def client_ready(self):
        self.id = 7084965046

    def getmarkup(self):
        return [
            [
                {
                    "text": "[‚úîÔ∏è] –ê–≤—Ç–æ–±–æ–Ω—É—Å" if self.config["ab"] else "[‚ùå] –ê–≤—Ç–æ–±–æ–Ω—É—Å",
                    "callback": self.callback_handler,
                    "args": ("ab",),
                }
            ],
            [
                {
                    "text": "[‚úîÔ∏è] –ê–≤—Ç–æ–ª–æ–≤–ª—è"
                    if self.config["catch"]
                    else "[‚ùå] –ê–≤—Ç–æ–ª–æ–≤–ª—è",
                    "callback": self.callback_handler,
                    "args": ("catch",),
                },
                {
                    "text": "[‚úîÔ∏è] –í—ã–≤–æ–¥ –≤–∞–π—Ñ—É"
                    if self.config["catch_output"]
                    else "[‚ùå] –í—ã–≤–æ–¥ –≤–∞–π—Ñ—É",
                    "callback": self.callback_handler,
                    "args": ("catch_output",),
                },
            ],
            [
                {
                    "text": "üîª –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é",
                    "callback": self.callback_handler,
                    "args": ("close",),
                }
            ],
        ]

    ########loop########
    @loader.loop(interval=1, autostart=True)
    async def check_loop(self):
        if self.config["ab"]:
            if (
                not self.get("ABonus_time")
                or (time.time() - self.get("ABonus_time")) >= 3600 * 4
            ):
                await self.autobonus()

    ########loop########

    ########–õ–æ–≤–µ—Ü########
    @loader.watcher("only_messages", "only_media")
    async def watcher(self, message: Message):
        """Watcher"""
        if (
            self.config["catch"]
            and message.sender_id == self.id
            and (
                not self.get("catcher_time")
                or int(time.time()) - int(self.get("catcher_time")) > 14400
            )
        ):
            if "–∑–∞–±–ª—É–¥–∏–ª–∞—Å—å" in message.text.lower():
                try:
                    await message.click()
                    await asyncio.sleep(5)
                    msgs = await message.client.get_messages(message.chat_id, limit=10)
                    for msg in msgs:
                        if (
                            msg.mentioned
                            and "–∑–∞–±—Ä–∞–ª–∏" in msg.text
                            and msg.sender_id == self.id
                        ):
                            if self.config["catch_output"]:
                                match = re.search(
                                    r", –í—ã –∑–∞–±—Ä–∞–ª–∏ (.+?)\. –í–∞–π—Ñ—É", msg.text
                                )
                                waifu = match.group(1)
                                caption = f"{waifu} –≤ –≤–∞—à–µ–º –≥–∞—Ä–µ–º–µ! <emoji document_id=5395592707580127159>üòé</emoji>"
                                await self.client.send_file(
                                    self.id, caption=caption, file=message.media
                                )
                            self.set("catcher_time", int(time.time()))
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≤–ª–µ –≤–∞–π—Ñ—É(–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ): {e}")

    ########–ó–∞—Ä–∞–±–æ—Ç–æ–∫########
    async def autobonus(self):
        wait_boost = False
        async with self._client.conversation(self.id) as conv:
            try:
                await conv.send_message("/bonus")
            except YouBlockedUserError:
                await self.client(UnblockRequest(self.id))
                await conv.send_message("/bonus")
            try:
                r = await conv.get_response()
            except:  # noqa: E722
                while True:
                    try:
                        r = await conv.get_response()
                        break
                    except:  # noqa: E722
                        pass
            self.set("ABonus_time", int(time.time()))
            if "–î–æ—Å—Ç—É–ø–µ–Ω –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏" in r.text:
                await conv.send_message("/start flyer_bonus")
                try:
                    r = await conv.get_response()
                except:  # noqa: E722
                    while True:
                        try:
                            r = await conv.get_response()
                            break
                        except:  # noqa: E722
                            pass
                if "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞" not in r.text:
                    to_leave = []
                    to_block = []
                    folders = []
                    chats_in_folders = []
                    wait_boost = False
                    if r.reply_markup:
                        a = r.buttons
                        for i in a:
                            for button in i:
                                if button.url:
                                    alr = False
                                    if "addlist/" in button.url:
                                        slug = self.button.split("addlist/")[-1]
                                        peers = await self.client(
                                            CheckChatlistInviteRequest(slug=slug)
                                        )
                                        if peers:
                                            peers = peers.peers
                                            try:
                                                a = await self.client(
                                                    JoinChatlistInviteRequest(
                                                        slug=slug, peers=peers
                                                    )
                                                )
                                                chats_in_folders.append(peers)

                                                for update in a.updates:
                                                    if isinstance(
                                                        update,
                                                        hikkatl.tl.types.UpdateDialogFilter,
                                                    ):
                                                        folder.append(
                                                            InputChatlistDialogFilter(
                                                                filter_id=update.id
                                                            )
                                                        )

                                            except:  # noqa: E722
                                                pass
                                        continue
                                    if not bool(
                                        re.match(
                                            r"^https?:\/\/t\.me\/[^\/]+\/?$", button.url
                                        )
                                    ):
                                        continue
                                    if "t.me/boost" in button.url:
                                        wait_boost = True
                                        continue
                                    if "t.me/+" in button.url:
                                        try:
                                            a = await self.client(
                                                CheckChatInviteRequest(
                                                    button.url.split("+")[-1]
                                                )
                                            )
                                            if (
                                                not hasattr(a, "request_needed")
                                                or not a.request_needed
                                            ):
                                                pass
                                            else:
                                                continue
                                        except:
                                            continue
                                    url = button.url
                                    if "?" in button.url:
                                        url = button.url.split("?")[0]
                                    try:
                                        entity = await self.client.get_entity(url)
                                    except:
                                        try:
                                            await self.client(
                                                ImportChatInviteRequest(
                                                    button.url.split("+")[-1]
                                                )
                                            )
                                        except InviteRequestSentError:
                                            pass
                                        entity = await self.client(
                                            CheckChatInviteRequest(
                                                button.url.split("+")[-1]
                                            )
                                        )
                                        alr = True
                                    if hasattr(entity, "broadcast"):
                                        if not alr:
                                            await self.client(
                                                JoinChannelRequest(button.url)
                                            )
                                            to_leave.append(entity.id)
                                        else:
                                            to_leave.append(entity.chat.id)
                                    elif hasattr(entity, "bot"):
                                        try:
                                            await self.client(
                                                UnblockRequest(entity.username)
                                            )
                                        except:
                                            print("–±–ª–∏–Ω")
                                        await self.client.send_message(entity, "/start")
                                        to_block.append(entity.username)
                        flyer_messages = await self.client.get_messages(
                            self.id, limit=1
                        )

                        if wait_boost:
                            await asyncio.sleep(120)
                        for m in flyer_messages:
                            await asyncio.sleep(5)
                            await m.click()
                            await asyncio.sleep(5)
                        for folder, chats in zip(folders, chats_in_folders):
                            await client(
                                LeaveChatlistRequest(peers=chats, chatlist=folder)
                            )
                        for bot in to_block:
                            await self.client(BlockRequest(bot))
                            await self.client.delete_dialog(bot)
                        for channel in to_leave:
                            try:
                                await self.client(LeaveChannelRequest(channel))
                            except:
                                pass
                count = 0
                if (
                    not self.get("last_lout")
                    or int(time.time()) - self.get("last_lout") > 43200
                ):
                    while count <= 2:
                        await conv.send_message("/lout")
                        try:
                            r = await conv.get_response()
                        except:  # noqa: E722
                            while True:
                                try:
                                    r = await conv.get_response()
                                    break
                                except:  # noqa: E722
                                    pass
                        if r.reply_markup:
                            m = await r.respond(".")
                            await self.lightsoutW(m, r)
                            await m.delete()
                            self.set("last_lout", int(time.time()))
                            count += 1
                        else:
                            break

    @loader.command()
    async def GifMenu(self, message):
        """–ú–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.call = await self.inline.form(
            message=message,
            text="–ú–µ–Ω—é –¥–ª—è @GIFgarem_bot",
            reply_markup=self.getmarkup(),
        )

    async def callback_handler(self, callback, data):
        if data == "close":
            await self.call.edit(text="–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ.")
        elif data:
            self.config[data] = not self.config[data]
            if data == "ab":
                self.check_loop.start() if self.config[data] else self.check_loop.stop()
            await callback.edit(reply_markup=self.getmarkup())

    @loader.command()
    async def lightsoutW(self, message, r=None):
        """[–æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ —Å –ø–æ–ª–µ–º] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ—à–∞–µ—Ç Lights Out"""
        if message.is_reply or r:
            if not r:
                r = await message.get_reply_message()
            if r.reply_markup:
                a = r.buttons
                pattern = []
                for i in a:
                    for m in i:
                        t = m.text
                        if t == "üåö":
                            pattern.append(0)
                        elif t == "üåû":
                            pattern.append(1)
                        else:
                            None
            else:
                await message.edit(
                    "<emoji document_id=5299030091735525430>‚ùóÔ∏è</emoji> –ù–µ –≤–∏–∂—É –ø–æ–ª—è –∏–≥—Ä—ã. –≠—Ç–æ —Ç–æ—á–Ω–æ —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?"
                )
                return

        else:
            await message.edit(
                "<emoji document_id=5299030091735525430>‚ùóÔ∏è</emoji> –ü—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∏–≥—Ä—É."
            )
            return
        if pattern:
            await message.edit("<emoji document_id=5472146462362048818>üí°</emoji>")
            clicks = await self.solution(pattern)
            if not clicks:
                await message.edit("–ò–¥–∏ –∫–æ–¥ —Ç—Ä–µ–π—Å–∏ –≥–µ–Ω–∏–π.")
                return  # *—Å–º–∞—á–Ω—ã–π –ø–∏–Ω–æ–∫ –∫–æ–¥–µ—Ä—É –ø–æ–¥ –∑–∞–¥.*
            for i in range(len(clicks)):
                if clicks[i] == 1:
                    r = await self.client.get_messages(r.chat_id, ids=r.id)
                    await r.click(i)
            await message.edit(
                "<emoji document_id=5395592707580127159>üòé</emoji> –ì–æ—Ç–æ–≤–æ."
            )
        else:
            await message.edit(
                "<emoji document_id=5299030091735525430>‚ùóÔ∏è</emoji> –¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ –Ω–∞ –ø–æ–ª–µ –∏–≥—Ä—ã."
            )
            return

    # ///|
    # ///|
    # ///|
    # ///ÀÖ
    async def solution(self, pole):
        n = len(pole)
        for num in range(2**n):
            binary_string = bin(num)[2:].zfill(n)
            presses = [int(char) for char in binary_string]
            temp = pole[:]

            for i in range(n):
                if presses[i]:
                    temp[i] ^= 1
                    if i % 3 > 0:
                        temp[i - 1] ^= 1
                    if i % 3 < 2:
                        temp[i + 1] ^= 1
                    if i >= 3:
                        temp[i - 3] ^= 1
                    if i < 6:
                        temp[i + 3] ^= 1

            if sum(temp) == 0:
                return presses

        return None

    ########–ó–∞—Ä–∞–±–æ—Ç–æ–∫########
